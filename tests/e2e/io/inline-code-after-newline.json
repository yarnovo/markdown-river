{
  "name": "换行后的行内代码补全",
  "description": "先输入一段文字和换行符，然后输入 ` 和字符，验证乐观更新",
  "input": {
    "chunks": ["Hello world", "\n", "`", "c"],
    "timing": "sequential"
  },
  "expected": {
    "steps": [
      {
        "after_chunk": 0,
        "description": "输入 Hello world 后，正常解析显示",
        "parsed_content": "Hello world",
        "display_html": "<p>Hello world</p>\n",
        "strategy_decision": "parse",
        "reason": "普通文本，直接解析"
      },
      {
        "after_chunk": 1,
        "description": "输入换行符后，继续解析",
        "parsed_content": "Hello world\n",
        "display_html": "<p>Hello world</p>\n",
        "strategy_decision": "parse",
        "reason": "添加换行符，继续解析"
      },
      {
        "after_chunk": 2,
        "description": "输入 ` 后，策略决定等待",
        "parsed_content": "Hello world\n",
        "display_html": "<p>Hello world</p>\n",
        "strategy_decision": "wait",
        "reason": "新段落开始的 ` 符号，等待更多输入"
      },
      {
        "after_chunk": 3,
        "description": "输入 c 后，策略决定乐观补全",
        "parsed_content": "Hello world\n`c`",
        "display_html": "<p>Hello world<br><code>c</code></p>\n",
        "strategy_decision": "complete",
        "reason": "检测到未闭合的 ` 且后面有内容，进行乐观补全"
      }
    ],
    "final_state": {
      "total_chunks_processed": 4,
      "final_display": "<p>Hello world<br><code>c</code></p>\n",
      "strategy_calls": 4
    }
  }
}
